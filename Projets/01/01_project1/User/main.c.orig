#include "UART1.h"
#include "Delay.h"
#include "UART2.h"
#include "Bluet_to_wifi.h"

#define BUF_SIZE 32
QueueHandle_t queue;


void Bluetooth_to_ttl ( void * arg ){	
	char buf[BUF_SIZE] = {0};
	int size = 0;
	char ch = 0;
	while(1){
		BaseType_t  ret = xQueueReceive(queue, &ch, 5000);
		if(ret == pdPASS){
			buf[size] = ch;
			size++;
		}else{
			if(size > 0){
				printf1("buf: %s \r\n", buf);
				
				char AT_wifi[64];
				int ret = convert_wifi_config(AT_wifi, buf, sizeof(AT_wifi));
				printf1("ret = %d\r\n", ret);
				printf1("Success: %s \r\n", buf);
				if (convert_wifi_config(AT_wifi, buf, sizeof(AT_wifi)) == 0) {
        printf("Success: %s\n", buf); 
        // 输出：AT+CWJAP_DEF="2jj","12uu"
    }

    // 错误格式用例
    if (convert_wifi_config(AT_wifi, buf, sizeof(AT_wifi)) == -1) {
        printf("Error: Invalid input format\n");
    }

    // 缓冲区不足用例
    if (convert_wifi_config(AT_wifi, buf, sizeof(AT_wifi)) == -2) {
        printf("Error: Output buffer too small\n");
    }
				memset(buf, 0, sizeof(buf));
				size = 0;
			}
		}
	}
}

//void Bluetooth_to_wifi(void *arg){
//    
//	char AT_wifi[64];
//    if (convert_wifi_config(AT_wifi, buf, sizeof(AT_wifi)) == 0) {
//        printf1("Success: %s\n", buf); 
//		}
//}

int main(void){
	USART1_Init();
	USART2_Init();
	Delay_Init();
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
	queue = xQueueCreate(64, 1);
	xTaskCreate(Bluetooth_to_ttl, "Bluetooth_to_ttl", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
//	xTaskCreate(Bluetooth_to_wifi, "Bluetooth_to_wifi", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
	vTaskStartScheduler();
	
	while(1){

	}
}
